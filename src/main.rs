// use serde::{Deserialize, Serialize};
use serde_json::Value;
// mod parser;
mod parser;
mod types;
use crate::types::{ProofStr, PvkStr};

fn main() {
    use bellman::groth16::{prepare_verifying_key, verify_proof, PreparedVerifyingKey, Proof};
    use bls12_381::Scalar as Fr;
    use bls12_381::{Bls12, G1Affine, G2Affine, G2Prepared, Gt};

    let vk_json = r#"
    {
        "protocol": "groth16",
        "curve": "bls12381",
        "nPublic": 1,
        "vk_alpha_1": [
         "2091294225088915310241771641387876150083927929227613117526411812349738858144725077543919684356696848464406117613657",
         "3801245186303257117688105953479682899417358258175676579521259592663347917998258211978415182423516113270615812488936",
         "1"
        ],
        "vk_beta_2": [
         [
          "3309816721747342584688145079837554289833542448573767484667832582981487301542702738703122459894256648744862652461156",
          "2315364297021177166261441676974349920667756361960565577630663980458273681125152557074598231774094913770962966744486"
         ],
         [
          "1694138112036301078367454614873975420107146248218546530299099622187264653813817821849918686305977639562102577745795",
          "160739737559595956071957147051218085067377314282727947157316703704802428521789514201414724548524215475147687345174"
         ],
         [
          "1",
          "0"
         ]
        ],
        "vk_gamma_2": [
         [
          "352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160",
          "3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758"
         ],
         [
          "1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905",
          "927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582"
         ],
         [
          "1",
          "0"
         ]
        ],
        "vk_delta_2": [
         [
          "2067192344598471514021579785994354034144660481316435297787482761419581749940136170001902738443892910555642533602456",
          "3524083025299741749385093111020364094142289566504424028463277819463772434322163873213422402481220684383062436699836"
         ],
         [
          "1104415969028710302400316938663804089115983139875163063899235647382445148141117136315278596058829090145501537344133",
          "3271171174923589704742790161532306736146393828576492970485377106693527560860330370447382175386401006034072195212882"
         ],
         [
          "1",
          "0"
         ]
        ],
        "vk_alphabeta_12": [
         [
          [
           "3478071409835714181066019832411189417327538432839463745652244802703191784607443718512097009794470154853248050999596",
           "3664015759098117404333325679977243088940818406738689297949750115181029168874044599697570076845053557836358828795214"
          ],
          [
           "3373070012686024239642047130857468698717959833553759531208814560975497084715651940130451125736423327561176591093475",
           "1556979049848329920707032478148689274285393741659379161599673099540965367710162097642937316861720814569439099339336"
          ],
          [
           "1224981699033753057676480766615355128318365983909037818247172605755640775761044524316202861326236103560918955629273",
           "2906888469873249237588804695717251539539217073153418047950384610767823324881085438094732316812108289473495429614890"
          ]
         ],
         [
          [
           "849358795865333865640234706752869476430116469437832957987117407192831641227411508235392692410795881876032882563752",
           "1924473212514605522053826973319262133098087184889868957966199320042501745401397116291791884821870874214461308301889"
          ],
          [
           "3590925956449261946729179829888994089245025504143906076938104290118142159560914264935295560094170563943453461991758",
           "3270401973103716202133197764519695680675815612138647300290908288503751853059011655066486242012062533000740227238650"
          ],
          [
           "3205234545802629102841310488148509045155229933496411178898386003078577108028384866733917431287778860415521993770641",
           "3686915000037428923182788215118277478797533921635193528727803122348091480371334964488229334198860626158324398372254"
          ]
         ]
        ],
        "IC": [
         [
          "1755758151167825370454423162818473244218735342931357044713645917045917156461041132022280541950532194779959221613157",
          "2741133642244628675624060289264602035701350093355742066657144459864721027150265704112101258418276400551884481333136",
          "1"
         ],
         [
          "2428560323694347369145612560789935115354998830950802602917500025806812305533957520751233137013679679650213724592361",
          "1955558427774182600134885445437533865957023806729183939316432299991428154807310732713082696860377020992820441544776",
          "1"
         ]
        ]
    }
    "#;

    let proof_json = r#"{
        {
            "pi_a": [
             "3052048403060778967818538410967287053699305706405950535416067940050792646129005135442321000355717716003573356376247",
             "2229985975097840933824845166660893799402773402719160370455282527203155082867718830036070062199632084408141646768040",
             "1"
            ],
            "pi_b": [
             [
              "3740888776998687590133093324973824428808603680082861482985630844819786492927808286424355591525863102327767049427192",
              "246404289847287465365546493967876231935909208909154603084783891029950730858846730246558894662092706239118398461366"
             ],
             [
              "2077119551438376650952640309412502603137422885573737558664844944784398515173545301999551836776855138912419233618641",
              "1730605693957586591226080254080509666902758980555464037926658003462912543725206698672240753171832548143444854561129"
             ],
             [
              "1",
              "0"
             ]
            ],
            "pi_c": [
             "2844715302991416027322179183597358776691109360982357951527257507612834457821855248987738392028045604074477870785982",
             "1756871381161264392160908542404281460713846138203402104818899277041597920489779905836043167867495858525570893161780",
             "1"
            ],
            "protocol": "groth16",
            "curve": "bls12381"
           }
    }
    "#;

    let vk_parsed: PvkStr = read_pvk_json(vk_json);
    let proof_parsed: ProofStr = read_proof_json(proof_json);
    println!("{:?}", vk_parsed.vk_alphabeta_12);

    // pvk
    let pvk = PreparedVerifyingKey::<Bls12> {
        alpha_g1_beta_g2: vk_parsed.vk_alphabeta_12,
        neg_gamma_g2: vk_parsed.vk_gamma_2,
        neg_delta_g2: vk_parsed.vk_delta_2,
        ic: vk_parsed.IC,
    };

    // proof
    let pof = Proof::<Bls12> {
        a: proof_parsed.pi_a,
        b: proof_parsed.pi_a,
        c: proof_parsed.pi_c,
    };
    assert!(verify_proof(&pvk, &pof, &[Fr::from(33)]).unwrap());
}

fn read_proof_json(raw_json: &str) -> ProofStr {
    let parsed: ProofStr = serde_json::from_str(raw_json).unwrap();
    return parsed;
}

fn read_pvk_json(raw_json: &str) -> PvkStr {
    let parsed: PvkStr = serde_json::from_str(raw_json).unwrap();
    return parsed;
}
