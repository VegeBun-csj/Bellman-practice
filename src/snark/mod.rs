// use serde::{Deserialize, Serialize};
use super::circuit::{MiMCDemo, MIMC_ROUNDS};
use bellman::Circuit;
use ff::PrimeField;
use ff::{Field, PrimeField as Fr};
use group::{prime::PrimeCurveAffine, Curve, Group, Wnaf, WnafGroup};
use pairing::Engine;
use rand::{thread_rng, RngCore};
use std::fs;
use std::fs::File;
use std::ops::Neg;
use subtle::{Choice, ConditionallySelectable, ConstantTimeEq, CtOption};
pub fn snark_proof_bellman_verify() {
    use bellman::groth16::{
        prepare_verifying_key, verify_proof, PreparedVerifyingKey, Proof, VerifyingKey,
    };
    use bls12_381::{Bls12, G1Affine, G2Affine, G2Prepared, Gt, Scalar};

    let vk_json = r#"
    {
        "protocol": "groth16",
        "curve": "bls12381",
        "nPublic": 1,
        "vk_alpha_1": [
         "2091294225088915310241771641387876150083927929227613117526411812349738858144725077543919684356696848464406117613657",
         "3801245186303257117688105953479682899417358258175676579521259592663347917998258211978415182423516113270615812488936",
         "1"
        ],
        "vk_beta_2": [
         [
          "3309816721747342584688145079837554289833542448573767484667832582981487301542702738703122459894256648744862652461156",
          "2315364297021177166261441676974349920667756361960565577630663980458273681125152557074598231774094913770962966744486"
         ],
         [
          "1694138112036301078367454614873975420107146248218546530299099622187264653813817821849918686305977639562102577745795",
          "160739737559595956071957147051218085067377314282727947157316703704802428521789514201414724548524215475147687345174"
         ],
         [
          "1",
          "0"
         ]
        ],
        "vk_gamma_2": [
         [
          "352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160",
          "3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758"
         ],
         [
          "1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905",
          "927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582"
         ],
         [
          "1",
          "0"
         ]
        ],
        "vk_delta_2": [
         [
          "2067192344598471514021579785994354034144660481316435297787482761419581749940136170001902738443892910555642533602456",
          "3524083025299741749385093111020364094142289566504424028463277819463772434322163873213422402481220684383062436699836"
         ],
         [
          "1104415969028710302400316938663804089115983139875163063899235647382445148141117136315278596058829090145501537344133",
          "3271171174923589704742790161532306736146393828576492970485377106693527560860330370447382175386401006034072195212882"
         ],
         [
          "1",
          "0"
         ]
        ],
        "vk_alphabeta_12": [
         [
          [
           "3478071409835714181066019832411189417327538432839463745652244802703191784607443718512097009794470154853248050999596",
           "3664015759098117404333325679977243088940818406738689297949750115181029168874044599697570076845053557836358828795214"
          ],
          [
           "3373070012686024239642047130857468698717959833553759531208814560975497084715651940130451125736423327561176591093475",
           "1556979049848329920707032478148689274285393741659379161599673099540965367710162097642937316861720814569439099339336"
          ],
          [
           "1224981699033753057676480766615355128318365983909037818247172605755640775761044524316202861326236103560918955629273",
           "2906888469873249237588804695717251539539217073153418047950384610767823324881085438094732316812108289473495429614890"
          ]
         ],
         [
          [
           "849358795865333865640234706752869476430116469437832957987117407192831641227411508235392692410795881876032882563752",
           "1924473212514605522053826973319262133098087184889868957966199320042501745401397116291791884821870874214461308301889"
          ],
          [
           "3590925956449261946729179829888994089245025504143906076938104290118142159560914264935295560094170563943453461991758",
           "3270401973103716202133197764519695680675815612138647300290908288503751853059011655066486242012062533000740227238650"
          ],
          [
           "3205234545802629102841310488148509045155229933496411178898386003078577108028384866733917431287778860415521993770641",
           "3686915000037428923182788215118277478797533921635193528727803122348091480371334964488229334198860626158324398372254"
          ]
         ]
        ],
        "IC": [
         [
          "1755758151167825370454423162818473244218735342931357044713645917045917156461041132022280541950532194779959221613157",
          "2741133642244628675624060289264602035701350093355742066657144459864721027150265704112101258418276400551884481333136",
          "1"
         ],
         [
          "2428560323694347369145612560789935115354998830950802602917500025806812305533957520751233137013679679650213724592361",
          "1955558427774182600134885445437533865957023806729183939316432299991428154807310732713082696860377020992820441544776",
          "1"
         ]
        ]
    }
    "#;

    let proof_json = r#"{
        {
            "pi_a": [
             "3052048403060778967818538410967287053699305706405950535416067940050792646129005135442321000355717716003573356376247",
             "2229985975097840933824845166660893799402773402719160370455282527203155082867718830036070062199632084408141646768040",
             "1"
            ],
            "pi_b": [
             [
              "3740888776998687590133093324973824428808603680082861482985630844819786492927808286424355591525863102327767049427192",
              "246404289847287465365546493967876231935909208909154603084783891029950730858846730246558894662092706239118398461366"
             ],
             [
              "2077119551438376650952640309412502603137422885573737558664844944784398515173545301999551836776855138912419233618641",
              "1730605693957586591226080254080509666902758980555464037926658003462912543725206698672240753171832548143444854561129"
             ],
             [
              "1",
              "0"
             ]
            ],
            "pi_c": [
             "2844715302991416027322179183597358776691109360982357951527257507612834457821855248987738392028045604074477870785982",
             "1756871381161264392160908542404281460713846138203402104818899277041597920489779905836043167867495858525570893161780",
             "1"
            ],
            "protocol": "groth16",
            "curve": "bls12381"
           }
    }
    "#;

    // get alpha1
    // let mut vk_alpha = pvk.vk_alpha_1;

    // parse the string to u8 Array

    // get u8 array
    let alpha1_array = [
        110, 249, 255, 46, 83, 232, 23, 2, 97, 111, 59, 57, 42, 131, 209, 16, 13, 196, 231, 64, 28,
        39, 197, 113, 55, 196, 70, 3, 208, 216, 50, 131, 223, 185, 31, 34, 147, 170, 155, 162, 102,
        99, 104, 251, 52, 26, 11, 15, 151, 205, 7, 226, 22, 198, 0, 25, 167, 116, 61, 193, 192, 56,
        137, 36, 20, 72, 250, 126, 221, 67, 18, 15, 10, 202, 98, 94, 61, 20, 65, 240, 166, 50, 152,
        168, 107, 199, 121, 83, 91, 56, 192, 151, 11, 49, 193, 16,
    ];
    // CtOption { value: G1Affine { x: 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, y: 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, infinity: Choice(1) }, is_some: Choice(0) }

    // let alpha1_array = [
    //     3, 246, 101, 176, 47, 75, 210, 222, 193, 131, 55, 56, 160, 78, 12, 166, 143, 166, 37, 223,
    //     113, 12, 67, 1, 10, 106, 142, 79, 240, 16, 5, 14, 232, 80, 129, 68, 45, 240, 100, 42, 241,
    //     226, 170, 175, 87, 99, 26, 10, 13, 89, 199, 253, 252, 74, 183, 34, 253, 228, 17, 43, 31,
    //     254, 235, 37, 166, 44, 13, 217, 159, 118, 50, 38, 95, 231, 189, 124, 236, 1, 169, 162, 218,
    //     2, 237, 15, 63, 69, 143, 3, 101, 114, 174, 22, 25, 97, 31, 253,
    // ];
    // CtOption { value: G1Affine { x: 0x03f665b02f4bd2dec1833738a04e0ca68fa625df710c43010a6a8e4ff010050ee85081442df0642af1e2aaaf57631a0a, y: 0x0d59c7fdfc4ab722fde4112b1ffeeb25a62c0dd99f7632265fe7bd7cec01a9a2da02ed0f3f458f036572ae1619611ffd, infinity: Choice(0) }, is_some: Choice(1) }
    /* let alpha1_affine = G1Affine::from_uncompressed(&alpha1_array);
    println!("{:?}", alpha1_affine); */

    // let vk_parsed: PvkStr = read_pvk_json(vk_json);
    // let proof_parsed: ProofStr = read_proof_json(proof_json);
    // println!("{:?}", vk_parsed.vk_alphabeta_12);

    // pvk
    // let pvk = PreparedVerifyingKey::<Bls12> {
    //     alpha_g1_beta_g2: vk_parsed.vk_alphabeta_12,
    //     neg_gamma_g2: vk_parsed.vk_gamma_2,
    //     neg_delta_g2: vk_parsed.vk_delta_2,
    //     ic: vk_parsed.IC,
    // };

    // // proof
    // let pof = Proof::<Bls12> {
    //     a: proof_parsed.pi_a,
    //     b: proof_parsed.pi_a,
    //     c: proof_parsed.pi_c,
    // };
    // assert!(verify_proof(&pvk, &pof, &[Fr::from(33)]).unwrap());

    let mut rng = thread_rng();
    let constants = (0..MIMC_ROUNDS)
        .map(|_| Scalar::random(&mut rng))
        .collect::<Vec<_>>();
    let c = MiMCDemo {
        xl: None,
        xr: None,
        constants: &constants,
    };
    random_parameters::<Bls12, _, _>(c, &mut rng);

    println!(">>>>start test the big end<<<<<");
    // big end
    let big_alpha1 = [
        13, 150, 96, 174, 178, 56, 233, 191, 247, 106, 167, 233, 118, 54, 170, 118, 27, 70, 115,
        14, 55, 105, 194, 192, 24, 211, 104, 39, 110, 21, 131, 4, 218, 205, 25, 81, 207, 175, 109,
        188, 105, 224, 45, 57, 61, 148, 0, 89, 24, 178, 122, 239, 61, 97, 168, 84, 3, 90, 33, 187,
        11, 87, 130, 197, 246, 168, 219, 202, 189, 168, 231, 207, 14, 39, 57, 85, 235, 223, 192,
        135, 119, 102, 168, 77, 140, 51, 65, 94, 58, 34, 110, 9, 176, 238, 62, 232,
    ];

    let big_beta2 = [
        15, 11, 16, 209, 181, 40, 54, 10, 247, 241, 243, 63, 5, 43, 80, 71, 130, 69, 198, 21, 151,
        234, 88, 183, 244, 61, 33, 240, 51, 194, 124, 178, 70, 187, 232, 18, 103, 217, 58, 140,
        198, 50, 253, 58, 187, 43, 13, 166, 21, 129, 26, 170, 251, 105, 202, 109, 231, 224, 137,
        209, 197, 191, 13, 175, 174, 147, 246, 50, 121, 99, 50, 95, 177, 252, 89, 21, 198, 78, 241,
        4, 125, 242, 249, 253, 203, 87, 54, 53, 165, 44, 115, 186, 194, 2, 112, 100, 1, 11, 90, 85,
        176, 91, 0, 39, 20, 7, 15, 8, 84, 25, 120, 205, 19, 89, 239, 197, 240, 212, 153, 35, 173,
        233, 160, 241, 251, 47, 191, 255, 190, 170, 111, 218, 232, 112, 7, 222, 48, 166, 185, 39,
        71, 4, 60, 22, 11, 1, 205, 52, 86, 176, 144, 111, 136, 180, 241, 140, 178, 174, 185, 145,
        200, 150, 72, 211, 57, 105, 22, 72, 75, 21, 34, 18, 219, 120, 150, 166, 99, 115, 112, 70,
        186, 93, 114, 243, 63, 13, 97, 101, 175, 54, 207, 131,
    ];

    let big_gamma2 = [
        19, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89, 107, 208, 208,
        153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51, 76, 241, 18, 19, 148, 93, 87,
        229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162, 178, 240, 143, 10, 145, 38, 8, 5, 39, 45,
        197, 16, 81, 198, 228, 122, 212, 250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11,
        172, 3, 38, 168, 5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184, 6, 6, 196, 160, 46,
        167, 52, 204, 50, 172, 210, 176, 43, 194, 139, 153, 203, 62, 40, 126, 133, 167, 99, 175,
        38, 116, 146, 171, 87, 46, 153, 171, 63, 55, 13, 39, 92, 236, 29, 161, 170, 169, 7, 95,
        240, 95, 121, 190, 12, 229, 213, 39, 114, 125, 110, 17, 140, 201, 205, 198, 218, 46, 53,
        26, 173, 253, 155, 170, 140, 189, 211, 167, 109, 66, 154, 105, 81, 96, 209, 44, 146, 58,
        201, 204, 59, 172, 162, 137, 225, 147, 84, 134, 8, 184, 40, 1,
    ];

    let big_delta2 = [
        22, 229, 124, 102, 66, 226, 94, 220, 135, 1, 0, 238, 248, 223, 1, 184, 246, 217, 206, 20,
        96, 197, 167, 63, 144, 96, 197, 124, 179, 158, 41, 233, 77, 245, 142, 223, 25, 119, 187,
        61, 225, 25, 164, 174, 149, 101, 94, 188, 13, 110, 74, 50, 208, 15, 154, 135, 117, 49, 101,
        88, 175, 40, 43, 47, 215, 37, 237, 121, 13, 35, 4, 253, 204, 15, 91, 84, 99, 159, 174, 128,
        3, 253, 184, 116, 226, 173, 121, 161, 56, 47, 145, 157, 166, 193, 100, 152, 21, 64, 211,
        140, 156, 106, 13, 33, 66, 239, 188, 19, 121, 11, 68, 249, 48, 101, 111, 241, 21, 154, 250,
        169, 62, 172, 104, 209, 106, 166, 49, 221, 193, 234, 21, 62, 228, 243, 80, 147, 16, 98,
        214, 36, 201, 162, 166, 82, 7, 44, 239, 226, 96, 24, 82, 57, 156, 104, 23, 30, 222, 137,
        96, 20, 254, 7, 254, 231, 161, 149, 147, 229, 16, 221, 197, 230, 50, 179, 17, 115, 24, 16,
        190, 56, 102, 30, 162, 16, 164, 185, 4, 48, 40, 79, 154, 133,
    ];

    // 
    //                 IC [Affine1, Affine1]
    // 
    let ic_0 = 
    [
        11, 104, 74, 197, 7, 98, 228, 173, 194, 54, 23, 170, 164, 147, 57, 181, 148, 20, 126, 39,
        76, 172, 121, 220, 85, 203, 148, 34, 93, 144, 154, 4, 36, 192, 160, 158, 171, 124, 245, 87,
        62, 9, 143, 27, 197, 84, 242, 101, 17, 207, 59, 178, 76, 85, 238, 87, 149, 206, 178, 48,
        184, 202, 45, 186, 66, 154, 34, 32, 52, 46, 106, 205, 43, 214, 41, 190, 191, 130, 61, 207,
        175, 226, 99, 146, 119, 223, 238, 175, 253, 49, 86, 166, 215, 175, 135, 144,
    ];


    let ic_1 = 
    [
        15, 199, 87, 59, 148, 95, 255, 11, 129, 67, 223, 48, 126, 249, 219, 98, 224, 113, 148, 176,
        20, 53, 29, 11, 236, 133, 205, 212, 237, 179, 68, 123, 134, 9, 187, 107, 79, 241, 71, 214,
        109, 81, 32, 62, 17, 238, 152, 233, 12, 180, 156, 236, 206, 115, 128, 52, 79, 30, 46, 4,
        63, 84, 1, 213, 53, 246, 85, 89, 58, 166, 185, 191, 35, 2, 32, 164, 238, 143, 229, 199,
        137, 70, 156, 43, 206, 199, 45, 186, 252, 224, 134, 153, 145, 4, 120, 72,
    ];

    // 
    // 
    // 
    let pi_a = 
    /* [
        20, 82, 182, 34, 159, 232, 234, 186, 149, 193, 218, 164, 114, 212, 73, 204, 62, 110, 53,
        212, 86, 6, 220, 72, 150, 100, 233, 125, 229, 33, 13, 245, 139, 128, 26, 121, 192, 29, 176,
        107, 42, 46, 92, 12, 141, 43, 141, 72, 3, 146, 178, 197, 3, 85, 27, 68, 133, 0, 160, 77,
        207, 113, 190, 31, 185, 242, 31, 98, 68, 81, 102, 122, 128, 136, 57, 0, 239, 3, 172, 19,
        126, 207, 188, 178, 97, 246, 82, 123, 187, 190, 196, 141, 77, 121, 243, 75,
    ]; */
    // [8,211,133,153,74,249,108,82,123,17,216,93,27,205,46,50,192,152,131,11,139,238,220,124,114,29,154,235,114,106,203,49,205,240,247,67,157,55,81,31,227,253,49,3,176,62,253,48,18,253,66,72,248,160,52,1,209,153,27,230,252,174,22,81,138,115,216,30,57,54,236,111,78,57,216,156,205,210,200,217,35,33,206,110,101,1,179,234,202,252,179,47,21,128,37,9];
    [12,144,136,118,40,170,166,93,111,127,180,91,49,146,33,55,62,1,29,206,214,7,196,82,76,6,235,37,169,224,168,127,120,21,188,176,246,91,86,39,80,190,29,59,168,103,94,223,5,215,172,169,225,22,32,150,118,146,75,235,164,21,185,236,74,35,39,159,238,116,248,68,251,241,163,97,203,245,231,240,202,13,61,126,35,175,204,75,209,98,177,97,252,152,0,34];

    let pi_b = 
    /* [
        20, 27, 122, 100, 61, 128, 100, 18, 51, 132, 134, 113, 155, 202, 231, 129, 177, 221, 156,
        115, 36, 99, 129, 233, 103, 16, 196, 3, 134, 131, 213, 139, 174, 179, 194, 126, 27, 163,
        56, 237, 89, 83, 165, 113, 86, 227, 108, 142, 22, 73, 85, 37, 230, 228, 162, 61, 66, 228,
        179, 9, 28, 24, 194, 146, 239, 13, 249, 42, 86, 249, 27, 80, 239, 14, 6, 123, 67, 161, 111,
        76, 204, 147, 220, 127, 118, 238, 46, 229, 211, 131, 206, 63, 92, 168, 72, 91, 14, 1, 32,
        42, 163, 1, 193, 58, 59, 131, 111, 90, 223, 165, 140, 73, 148, 85, 178, 13, 7, 134, 124,
        49, 108, 42, 131, 239, 198, 197, 197, 134, 234, 249, 192, 145, 84, 91, 13, 160, 179, 70, 0,
        95, 0, 101, 37, 195, 13, 13, 33, 244, 89, 251, 112, 227, 89, 104, 113, 201, 24, 188, 165,
        125, 227, 47, 15, 191, 124, 240, 46, 115, 169, 24, 81, 33, 160, 88, 49, 27, 253, 243, 203,
        59, 116, 111, 94, 250, 253, 131, 181, 238, 236, 167, 217, 48,
    ]; */
    // [0,222,190,29,117,74,139,107,216,153,167,235,26,119,80,168,45,174,223,220,253,235,97,185,58,67,83,191,29,116,114,98,78,13,76,13,244,170,59,110,226,178,75,228,31,254,12,11,18,0,73,212,154,181,143,199,101,30,197,164,19,234,138,181,36,72,239,31,147,31,232,70,108,158,93,85,229,234,163,214,157,33,223,91,57,192,159,179,208,147,88,143,44,21,85,103,12,111,4,188,75,124,189,88,185,85,87,252,93,160,12,94,82,126,238,101,147,190,187,148,243,30,26,202,77,125,169,164,127,139,143,155,143,209,85,207,171,142,91,33,14,240,14,226,20,95,16,253,162,68,119,61,138,77,24,136,187,214,60,198,20,5,205,49,122,65,3,103,176,229,107,226,251,100,90,129,6,150,119,10,109,114,222,137,151,229,9,94,193,84,5,67];
    [9,77,220,8,4,83,139,117,118,125,213,2,25,155,125,209,102,171,216,140,161,158,235,47,109,77,155,207,96,167,75,24,181,35,116,85,184,77,231,190,196,150,44,227,198,171,69,203,6,233,217,220,163,197,47,230,77,150,16,181,120,116,239,240,190,3,42,166,45,236,39,198,229,105,101,255,94,130,114,147,180,14,59,168,135,92,68,190,235,122,227,100,88,73,61,198,8,205,134,149,130,251,5,69,110,206,88,167,229,145,90,102,136,14,233,197,12,175,91,251,183,205,34,206,194,81,106,52,228,211,74,145,12,193,106,183,174,111,199,221,109,203,169,149,18,156,226,197,174,61,241,125,30,244,89,91,36,21,157,56,111,30,164,8,149,48,70,65,216,250,241,88,154,182,163,194,123,144,183,98,232,27,185,90,127,69,118,143,157,199,113,118];
    let pi_c = 
    /* [
        6, 24, 19, 61, 33, 28, 154, 109, 102, 30, 105, 61, 199, 82, 222, 205, 171, 89, 203, 91,
        117, 28, 140, 192, 98, 40, 154, 190, 242, 150, 141, 2, 236, 108, 2, 102, 238, 224, 51, 141,
        15, 169, 56, 69, 226, 240, 135, 81, 9, 232, 116, 236, 155, 184, 199, 154, 42, 133, 13, 240,
        125, 66, 201, 84, 119, 98, 78, 67, 111, 244, 116, 159, 200, 7, 129, 168, 5, 251, 92, 45,
        254, 186, 78, 177, 87, 232, 157, 171, 242, 179, 216, 19, 88, 9, 148, 236,
    ]; */
    // [14,49,246,217,242,190,102,220,44,228,108,187,75,46,123,41,103,34,11,197,229,23,160,30,95,7,177,65,111,122,121,204,226,105,114,166,117,194,24,222,32,126,220,40,99,50,153,12,3,10,92,251,31,169,217,18,11,45,222,233,118,31,164,93,56,84,174,27,70,219,178,197,123,124,247,13,237,36,136,205,198,247,167,242,51,147,127,0,189,14,152,220,162,91,33,15];
    [8,71,64,158,17,236,186,205,113,60,118,224,215,137,199,241,50,198,95,46,194,144,204,134,192,217,59,87,36,179,178,169,218,135,96,148,152,123,18,87,68,194,219,69,100,153,148,54,19,95,108,32,39,174,239,163,209,229,84,154,226,102,35,187,123,28,100,164,71,74,79,83,242,184,235,43,190,131,96,62,114,20,1,85,88,104,47,58,128,249,137,161,76,225,102,196];

    let mut ic_affine = vec![];
    let alpha1_affine = G1Affine::from_uncompressed(&big_alpha1).unwrap();
    let beta2_affine = G2Affine::from_uncompressed(&big_beta2).unwrap();
    let gamma2_affine = G2Affine::from_uncompressed(&big_gamma2).unwrap();
    let delta2_affine = G2Affine::from_uncompressed(&big_delta2).unwrap();
    let pia_affine = G1Affine::from_uncompressed(&pi_a).unwrap();
    let pib_affine = G2Affine::from_uncompressed(&pi_b).unwrap();
    let pic_affine = G1Affine::from_uncompressed(&pi_c).unwrap();

    // ic_affine.push(G1Affine::from_uncompressed(&ic[0]).unwrap());
    // ic_affine.push(G1Affine::from_uncompressed(&ic[1]).unwrap());
    let ic0_affine = G1Affine::from_uncompressed(&ic_0).unwrap();
    let ic1_affine = G1Affine::from_uncompressed(&ic_1).unwrap();

    ic_affine.push(ic0_affine);
    ic_affine.push(ic1_affine);

    println!("{:?}", alpha1_affine);
    println!("{:?}", beta2_affine);
    println!("{:?}", gamma2_affine);
    println!("{:?}", delta2_affine);
    println!("{:?}", ic0_affine);
    println!("{:?}", ic1_affine);
    println!("{:?}", pia_affine);
    println!("{:?}", pib_affine);
    println!("{:?}", pic_affine);

    // construct a vkey
    let vkey = VerifyingKey::<Bls12> {
        alpha_g1: alpha1_affine,
        beta_g1: G1Affine::identity(),
        beta_g2: beta2_affine,
        gamma_g2: gamma2_affine,
        delta_g1: G1Affine::identity(),
        delta_g2: delta2_affine,
        ic: ic_affine,
    };

    // 为了最后的验证，其中gamma和delta会求逆元
    let pvk = prepare_verifying_key(&vkey);

    let proof = Proof::<Bls12> {
        a: pia_affine,
        b: pib_affine,
        c: pic_affine,
    };

    // let mut acc = pvk.ic[0].to_curve();

    // 目测问题是出在内部的值处理
    assert!(verify_proof(&pvk, &proof, &[Fr::from_str_vartime("33").unwrap()]).is_ok());

    // proof非法
    // thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: InvalidProof', src/snark/mod.rs:355:89


    // println!("{:?}", PrimeField::from_str_vartime("33"));

    println!(
        "{:?}",
        verify_proof(&pvk, &proof, &[Fr::from_str_vartime("33").unwrap()]).unwrap()
    );

    /* for (i, b) in Fr::from_str_vartime("33").unwrap().iter().zip(pvk.ic.iter().skip(1)) {
        // AddAssign::<&E::G1>::add_assign(&mut acc, &(*b * i));
        println!("{:?}", i);
    } */

}

pub fn random_parameters<E, C, R>(circuit: C, mut rng: &mut R)
where
    E: Engine,
    E::G1: WnafGroup,
    E::G2: WnafGroup,
    C: Circuit<E::Fr>,
    R: RngCore,
{
    // 随机生成两个生成元g1和g2，类型是Projective，即映射方式
    let g1 = E::G1::random(&mut rng);
    let g2 = E::G2::random(&mut rng);
    // 生成素数域上的随机数
    let alpha = E::Fr::random(&mut rng);
    let beta = E::Fr::random(&mut rng);
    let gamma = E::Fr::random(&mut rng);
    let delta = E::Fr::random(&mut rng);
    let tau = E::Fr::random(&mut rng);

    println!("see see the internal implementation and construct a new Affine ! .......");
    // this is a G1Projective type
    println!("g1 is {:?}", g1);
    println!("g2 is {:?}", g2);

    // this is a ??? type
    println!("alpha is {:?}", alpha);
    println!("beta is {:?}", beta);
    println!("gamma is {:?}", gamma);
    println!("delta is {:?}", delta);
    println!("tau is {:?}", tau);

    println!("----------------------------------------------------------------");

    // this is a Affine type
    let g1 = g1.to_affine();
    let g2 = g2.to_affine();
    println!("g1 Affine is {:?}", g1);
    println!("g2 Affine is {:?}", g2);
    // g1 * alpha is a G1Projective type   (Affine * Projective = Projective)
    println!("g1 * alpha is {:?}", (g1 * alpha).to_affine());
    println!("g2 * beta is {:?}", (g2 * beta).to_affine());
}
